Three Generative, Lexicalised Models for Statistical Parsing

In this paper we ﬁrst propose a new sta-
tistical parsing model, which is a genera-
tive model of lexicalised context-free gram-
mar. We then extend the model to in-
clude a probabilistic treatment of both sub-
categorisation and wh-movement. Results
on Wall Street Journal text show that the
parser performs at 88.1/87.5% constituent
precision/recall, an average improvement
of 2.3% over (Collins 96).

Generative models of syntax have been central in
linguistics since they were introduced in (Chom-
sky 57). Each sentence-tree pair (S, T ) in a lan-
guage has an associated top-down derivation con-
sisting of a sequence of rule applications of a gram-
mar. These models can be extended to be statisti-
cal by deﬁning probability distributions at points of
non-determinism in the derivations, thereby assign-
ing a probability P(S, T ) to each (S, T ) pair. Proba-
bilistic context free grammar (Booth and Thompson
73) was an early example of a statistical grammar.
A PCFG can be lexicalised by associating a head-
word with each non-terminal in a parse tree; thus
far, (Magerman 95; Jelinek et al. 94) and (Collins
96), which both make heavy use of lexical informa-
tion, have reported the best statistical parsing per-
formance on Wall Street Journal text. Neither of
these models is generative, instead they both esti-
mate P(T | S) directly.

This paper proposes three new parsing models.
Model 1 is essentially a generative version of the
model described in (Collins 96).
In Model 2, we
extend the parser to make the complement/adjunct
distinction by adding probabilities over subcategori-
sation frames for head-words. In Model 3 we give
a probabilistic treatment of wh-movement, which

is derived from the analysis given in Generalized
Phrase Structure Grammar (Gazdar et al. 95). The
work makes two advances over previous models:
First, Model 1 performs signiﬁcantly better than
(Collins 96), and Models 2 and 3 give further im-
provements — our ﬁnal results are 88.1/87.5% con-
stituent precision/recall, an average improvement
of 2.3% over (Collins 96).
Second, the parsers
in (Collins 96) and (Magerman 95; Jelinek et al.
94) produce trees without information about wh-
movement or subcategorisation. Most NLP applica-
tions will need this information to extract predicate-
argument structure from parse trees.

In the remainder of this paper we describe the 3
models in section 2, discuss practical issues in sec-
tion 3, give results in section 4, and give conclusions
in section 5.

In general, a statistical parsing model deﬁnes the
conditional probability, P(T | S), for each candidate
parse tree T for a sentence S. The parser itself is
an algorithm which searches for the tree, Tbest, that
maximises P(T | S). A generative model uses the
observation that maximising P(T, S) is equivalent
to maximising P(T | S).

P(T, S) is then estimated by attaching probabilities
to a top-down derivation of the tree. In a PCFG,
for a tree derived by n applications of context-free
re-write rules LHSi ⇒ RHSi, 1 ≤ i ≤ n.

Figure 1: A lexicalised parse tree, and a list of the rules it contains. For brevity we omit the POS tag
associated with each word.

of one or more non-terminals; or lexical, where LHS
is a part of speech tag and RHS is a word.

A PCFG can be lexicalised2 by associating a word
w and a part-of-speech (POS) tag t with each non-
terminal X in the tree. Thus we write a non-
terminal as X(x), where x = hw, ti, and X is a
constituent label. Each rule now has the form3:

H is the head-child of the phrase, which inherits
the head-word h from its parent P . L1...Ln and
R1...Rm are left and right modiﬁers of H. Either
n or m may be zero, and n = m = 0 for unary
rules. Figure 1 shows a tree which will be used as
an example throughout this paper.

The addition of lexical heads leads to an enormous
number of potential rules, making direct estimation
of P(RHS | LHS) infeasible because of sparse data
problems. We decompose the generation of the RHS
of a rule such as (3), given the LHS, into three steps
— ﬁrst generating the head, then making the inde-
pendence assumptions that the left and right modi-
ﬁers are generated by separate 0th-order markov pro-
cesses4:

1. Generate the head constituent label of the

phrase, with probability PH (H | P, h).

2. Generate modiﬁers to the right of the head
with probability Qi=1..m+1 PR(Ri(ri) | P, h, H).
Rm+1(rm+1) is deﬁned as ST OP — the ST OP
symbol
is added to the vocabulary of non-
terminals, and the model stops generating right
modiﬁers when it is generated.

2We ﬁnd lexical heads in Penn treebank data using
rules which are similar to those used by (Magerman 95;
Jelinek et al. 94).

3With the exception of the top rule in the tree, which

has the form TOP → H(h).

4An exception is the ﬁrst rule in the tree, TOP →

H(h), which has probability PT OP (H, h|T OP )

3. Generate modiﬁers to the left of the head with
probability Qi=1..n+1 PL(Li(li)|P, h, H), where
Ln+1(ln+1) = ST OP .

For example, the probability of the rule S(bought)
-> NP(week) NP(Marks) VP(bought) would be es-
timated as

Ph(VP | S,bought) × Pl(NP(Marks) | S,VP,bought) ×
Pl(NP(week) | S,VP,bought) × Pl(STOP | S,VP,bought) ×

Pr(STOP | S,VP,bought)

We have made the 0th order markov assumptions

but in general the probabilities could be conditioned
on any of the preceding modiﬁers.
In fact, if the
derivation order is ﬁxed to be depth-ﬁrst — that
is, each modiﬁer recursively generates the sub-tree
below it before the next modiﬁer is generated —
then the model can also condition on any structure
below the preceding modiﬁers. For the moment we
exploit this by making the approximations

where distancel and distancer are functions of the
surface string from the head word to the edge of the
constituent (see ﬁgure 2). The distance measure is
the same as in (Collins 96), a vector with the fol-
lowing 3 elements: (1) is the string of zero length?
(Allowing the model to learn a preference for right-
branching structures); (2) does the string contain a
verb? (Allowing the model to learn a preference for
modiﬁcation of the most recent verb). (3) Does the
string contain 0, 1, 2 or > 2 commas? (where a
comma is anything tagged as “,” or “:”).

Figure 2: The next child, R3(r3), is generated with
probability P(R3(r3) | P, H, h, distancer(2)). The
distance is a function of the surface string from the
word after h to the last word of R2, inclusive.
In
principle the model could condition on any struc-
ture dominated by H, R1 or R2.

The tree in ﬁgure 1 is an example of the importance
of the complement/adjunct distinction. It would be
useful to identify “Marks” as a subject, and “Last
week” as an adjunct (temporal modiﬁer), but this
distinction is not made in the tree, as both NPs are
in the same position5 (sisters to a VP under an S
node). From here on we will identify complements
by attaching a “-C” suﬃx to non-terminals — ﬁg-
ure 3 gives an example tree.

Figure 3: A tree with the “-C” suﬃx used to identify
complements. “Marks” and “Brooks” are in subject
and object position respectively. “Last week” is an
adjunct.

A post-processing stage could add this detail to
the parser output, but we give two reasons for mak-
ing the distinction while parsing: First, identifying
complements is complex enough to warrant a prob-
abilistic treatment. Lexical information is needed

5Except “Marks” is closer to the VP, but note that
“Marks” is also the subject in “Marks last week bought
Brooks”.

— for example, knowledge that “week” is likely to
be a temporal modiﬁer. Knowledge about subcat-
egorisation preferences — for example that a verb
takes exactly one subject — is also required. These
problems are not restricted to NPs, compare “The
spokeswoman said (SBAR that the asbestos was
dangerous)” vs.
“Bonds beat short-term invest-
ments (SBAR because the market is down)”, where
an SBAR headed by “that” is a complement, but an
SBAR headed by “because” is an adjunct.

The second reason for making the comple-
ment/adjunct distinction while parsing is that it
may help parsing accuracy. The assumption that
complements are generated independently of each
other often leads to incorrect parses — see ﬁgure 4
for further explanation.

Identifying Complements and Adjuncts in the Penn Treebank.

We add the “-C” suﬃx to all non-terminals in
training data which satisfy the following conditions:

1. The non-terminal must be: (1) an NP, SBAR,
or S whose parent is an S; (2) an NP, SBAR, S,
or VP whose parent is a VP; or (3) an S whose
parent is an SBAR.

2. The non-terminal must not have one of the fol-
lowing semantic tags: ADV, VOC, BNF, DIR,
EXT, LOC, MNR, TMP, CLR or PRP. See
(Marcus et al. 94) for an explanation of what
these tags signify. For example, the NP “Last
week” in ﬁgure 1 would have the TMP (tempo-
ral) tag; and the SBAR in “(SBAR because the
market is down)”, would have the ADV (adver-
bial) tag.

In addition, the ﬁrst child following the head of a prepositional phrase is marked as a complement.

The model could be retrained on training data
with the enhanced set of non-terminals, and it
might learn the lexical properties which distinguish
complements and adjuncts (“Marks” vs “week”, or
“that” vs. “because”). However, it would still suﬀer
from the bad independence assumptions illustrated
in ﬁgure 4. To solve these kinds of problems, the gen-
erative process is extended to include a probabilistic
choice of left and right subcategorisation frames:

Figure 4: Two examples where the assumption that modiﬁers are generated independently of each
other leads to errors.

Each subcat frame is a multi-
set6 specifying the complements which the head
requires in its left or right modiﬁers.

3. Generate the left and right modiﬁers with prob-
abilities Pl(Li, li | H, P, h, distancel(i − 1), LC)
and Pr(Ri, ri | H, P, h, distancer(i − 1), RC) re-
spectively. Thus the subcat requirements are
added to the conditioning context. As comple-
ments are generated they are removed from the
appropriate subcat multiset. Most importantly,
the probability of generating the ST OP symbol
will be 0 when the subcat frame is non-empty,
and the probability of generating a complement
will be 0 when it is not in the subcat frame;
thus all and only the required complements will
be generated.

Another obstacle to extracting predicate-argument
structure from parse trees is wh-movement. This
section describes a probabilistic treatment of extrac-
tion from relative clauses. Noun phrases are most of-
ten extracted from subject position, object position,
or from within PPs:

Here the head initially decides to take a sin-
gle NP-C (subject) to its left, and no complements
6A multiset, or bag, is a set which may contain du-

plicate non-terminal labels.

It might be possible to write rule-based patterns
which identify traces in a parse tree. However, we
argue again that this task is best integrated into
the parser: the task is complex enough to warrant
a probabilistic treatment, and integration may help
parsing accuracy. A couple of complexities are that
modiﬁcation by an SBAR does not always involve
extraction (e.g., “the fact (SBAR that besoboru is

Figure 5: A +gap feature can be added to non-terminals to describe NP extraction. The top-level NP
initially generates an SBAR modiﬁer, but speciﬁes that it must contain an NP trace by adding the +gap
feature. The gap is then passed down through the tree, until it is discharged as a T RACE complement to
the right of bought.

played with a ball and a bat)”), and it is not un-
common for extraction to occur through several con-
stituents, (e.g., “The changes (SBAR that he said
the government was prepared to make TRACE)”).
The second reason for an integrated treatment
of traces is to improve the parameterisation of the
model. In particular, the subcategorisation proba-
bilities are smeared by extraction. In examples 1, 2
and 3 above ‘bought’ is a transitive verb, but with-
out knowledge of traces example 2 in training data
will contribute to the probability of ‘bought’ being
an intransitive verb.

Formalisms similar to GPSG (Gazdar et al. 95)
handle NP extraction by adding a gap feature to
each non-terminal in the tree, and propagating gaps
through the tree until they are ﬁnally discharged as a
trace complement (see ﬁgure 5). In extraction cases
the Penn treebank annotation co-indexes a TRACE
with the WHNP head of the SBAR, so it is straight-
forward to add this information to trees in training
data.

Given that the LHS of the rule has a gap, there
are 3 ways that the gap can be passed down to the
RHS:

Head The gap is passed to the head of the phrase,

as in rule (3) in ﬁgure 5.

Left, Right The gap is passed on recursively to one
of the left or right modiﬁers of the head, or is
discharged as a trace argument to the left/right
of the head. In rule (2) it is passed on to a right
modiﬁer, the S complement. In rule (4) a trace
is generated to the right of the head VB.

We specify a parameter PG(G | P, h, H) where G
is either Head, Left or Right. The generative pro-
cess is extended to choose between these cases after
generating the head of the phrase. The rest of the
phrase is then generated in diﬀerent ways depend-
ing on how the gap is propagated:
In the Head
case the left and right modiﬁers are generated as
normal.
In the Left, Right cases a gap require-
ment is added to either the left or right SUBCAT
variable. This requirement is fulﬁlled (and removed
from the subcat list) when a trace or a modiﬁer
non-terminal which has the +gap feature is gener-
ated. 

Figure 6: The life of a constituent in the chart. (+) means a constituent is complete (i.e.
it includes the
stop probabilities), (−) means a constituent is incomplete. (a) a new constituent is started by projecting a
complete rule upwards; (b) the constituent then takes left and right modiﬁers (or none if it is unary). (c)
ﬁnally, ST OP probabilities are added to complete the constituent.

Part of speech tags are generated along with the
words in this model. When parsing, the POS tags al-
lowed for each word are limited to those which have
been seen in training data for that word. For un-
known words, the output from the tagger described
in (Ratnaparkhi 96) is used as the single possible tag
for that word. A CKY style dynamic programming
chart parser is used to ﬁnd the maximum probability
tree for each sentence (see ﬁgure 6).

The parser was trained on sections 02 - 21 of the Wall
Street Journal portion of the Penn Treebank (Mar-
cus et al. 93) (approximately 40,000 sentences), and
tested on section 23 (2,416 sentences). We use the
PARSEVAL measures (Black et al. 91) to compare
performance:

Table 2: Results on Section 23 of the WSJ Treebank. LR/LP = labeled recall/precision. CBs is the average
number of crossing brackets per sentence. 0 CBs, ≤ 2 CBs are the percentage of sentences with 0 or ≤ 2
crossing brackets respectively.


For a constituent to be ‘correct’ it must span the
same set of words (ignoring punctuation, i.e. all to-
kens tagged as commas, colons or quotes) and have
the same label8 as a constituent in the treebank
parse. Table 2 shows the results for Models 1, 2 and
3. The precision/recall of the traces found by Model
3 was 93.3%/90.1% (out of 436 cases in section 23
of the treebank), where three criteria must be met
for a trace to be “correct”: (1) it must be an argu-
ment to the correct head-word; (2) it must be in the
correct position in relation to that head word (pre-
ceding or following); (3) it must be dominated by the
correct non-terminal label. For example, in ﬁgure 5
the trace is an argument to bought, which it fol-
lows, and it is dominated by a VP. Of the 436 cases,
342 were string-vacuous extraction from subject po-
sition, recovered with 97.1%/98.2% precision/recall;
and 94 were longer distance cases, recovered with
76%/60.6% precision/recall 9.

Model 1 is similar in structure to (Collins 96) —
the major diﬀerences being that the “score” for each
bigram dependency is Pl(Li, li|H, P, h, distancel)

8(Magerman 95) collapses ADVP and PRT to the same
label, for comparison we also removed this distinction
when calculating scores.

9We exclude inﬁnitival relative clauses from these ﬁg-
ures, for example “I called a plumber TRACE to ﬁx the
sink” where ‘plumber’ is co-indexed with the trace sub-
ject of the inﬁnitival. The algorithm scored 41%/18%
precision/recall on the 60 cases in section 23 — but in-
ﬁnitival relatives are extremely diﬃcult even for human
annotators to distinguish from purpose clauses (in this
case, the inﬁnitival could be a purpose clause modifying
‘called’) (Ann Taylor, p.c.)

rather than Pl(Li, P, H | li, h, distancel), and that
there are the additional probabilities of generat-
ing the head and the ST OP symbols for each con-
stituent. However, Model 1 has some advantages
which may account for the improved performance.
The model in (Collins 96) is deﬁcient, that is for
most sentences S, PT P(T | S) < 1, because prob-
ability mass is lost to dependency structures which
violate the hard constraint that no links may cross.
For reasons we do not have space to describe here,
Model 1 has advantages in its treatment of unary
rules and the distance measure. The generative
model can condition on any structure that has been
previously generated — we exploit this in models 2
and 3 — whereas (Collins 96) is restricted to condi-
tioning on features of the surface string alone.

(Charniak 95) also uses a lexicalised genera-
In our notation, he decomposes
tive model.
P(RHSi | LHSi) as P(Rn...R1HL1..Lm | P, h) ×
Qi=1..n P(ri | P, Ri, h) × Qi=1..m P(li | P, Li, h). The
Penn treebank annotation style leads to a very
large number of context-free rules, so that directly
estimating P(Rn...R1HL1..Lm | P, h) may lead to
sparse data problems, or problems with coverage
(a rule which has never been seen in training may
be required for a test data sentence). The com-
plement/adjunct distinction and traces increase the
number of rules, compounding this problem.

(Eisner 96) proposes 3 dependency models, and
gives results that show that a generative model sim-
ilar to Model 1 performs best of the three. However,
a pure dependency model omits non-terminal infor-
mation, which is important. (Alshawi 96) extends a generative depen-
dency model to include an additional state variable
which is equivalent to having non-terminals — his suggestions may be close to our models 1 and 2, but
he does not fully specify the details of his model, and
doesn’t give results for parsing accuracy. (Miller et
al. 96) describe a model where the RHS of a rule is
generated by a Markov process, although the pro-
cess is not head-centered. They increase the set of
non-terminals by adding semantic labels rather than
by adding lexical head-words.

(Magerman 95; Jelinek et al. 94) describe a
history-based approach which uses decision trees to
estimate P(T |S). Our models use much less sophis-
ticated n-gram estimation methods, and might well
beneﬁt from methods such as decision-tree estima-
tion which could condition on richer history than
just surface distance.

There has

recently been interest

in using
dependency-based parsing models in speech recog-
nition, for example (Stolcke 96). It is interesting to
note that Models 1, 2 or 3 could be used as lan-
guage models. The probability for any sentence can
be estimated as P(S) = PT P(T, S), or (making
a Viterbi approximation for eﬃciency reasons) as
P(S) ≈ P(Tbest, S). We intend to perform experi-
ments to compare the perplexity of the various mod-
els, and a structurally similar ‘pure’ PCFG10.

This paper has proposed a generative, lexicalised,
probabilistic parsing model. We have shown that lin-
guistically fundamental ideas, namely subcategori-
sation and wh-movement, can be given a statistical
interpretation. This improves parsing performance,
and, more importantly, adds useful information to
the parser’s output.

I would like to thank Mitch Marcus, Jason Eisner,
Dan Melamed and Adwait Ratnaparkhi for many
useful discussions, and comments on earlier versions
of this paper. This work has also beneﬁted greatly
from suggestions and advice from Scott Miller.

