A New Statistical Parser Based on Bigram Lexical Dependencies

This paper describes a new statistical
parser which is based on probabilities of
dependencies between head-words in the
parse tree. Standard bigram probability es-
timation techniques are extended to calcu-
late probabilities of dependencies between
pairs of words. Tests using Wall Street
Journal data show that the method per-
forms at least as well as SPATTER (Mager-
man 95; Jelinek et al. 94), which has
the best published results for a statistical
parser on this task. The simplicity of the
approach means the model trains on 40,000
sentences in under 15 minutes. With a
beam search strategy parsing speed can be
improved to over 200 sentences a minute
with negligible loss in accuracy.


Lexical information has been shown to be crucial for
many parsing decisions, such as prepositional-phrase
attachment (for example (Hindle and Rooth 93)).
However, early approaches to probabilistic parsing
(Pereira and Schabes 92; Magerman and Marcus 91;
Briscoe and Carroll 93) conditioned probabilities on
non-terminal labels and part of speech tags alone.
The SPATTER parser (Magerman 95; Jelinek et al.
94) does use lexical information, and recovers labeled
constituents in Wall Street Journal text with above
84% accuracy – as far as we know the best published
results on this task.

This paper describes a new parser which is much
simpler than SPATTER, yet performs at least as well
when trained and tested on the same Wall Street
Journal data. The method uses lexical informa-
tion directly by modeling head-modiﬁer1 relations
between pairs of words. In this way it is similar to

The aim of a parser is to take a tagged sentence
as input (for example Figure 1(a)) and produce a
phrase-structure tree as output (Figure 1(b)). A
statistical approach to this problem consists of two
components. First, the statistical model assigns a
probability to every candidate parse tree for a sen-
tence. Formally, given a sentence S and a tree T , the
model estimates the conditional probability P (T |S).
The most likely parse under the model is then:

Second, the parser is a method for ﬁnding Tbest.
This section describes the statistical model, while
section 3 describes the parser.

The key to the statistical model is that any tree
such as Figure 1(b) can be represented as a set of
baseNPs2 and a set of dependencies as in Fig-
ure 1(c). We call the set of baseNPs B, and the
set of dependencies D; Figure 1(d) shows B and D
for this example. For the purposes of our model,
T = (B, D), and:

S is the sentence with words tagged for part of
speech. That is, S =< (w1, t1), (w2, t2)...(wn, tn) >.
For POS tagging we use a maximum-entropy tag-
ger described in (Ratnaparkhi 96). The tagger per-
forms at around 97% accuracy on Wall Street Jour-
nal Text, and is trained on the ﬁrst 40,000 sentences
of the Penn Treebank (Marcus et al. 93).

Given S and B, the reduced sentence ¯S is de-
ﬁned as the subsequence of S which is formed by
removing punctuation and reducing all baseNPs to
their head-word alone.

2A baseNP or ‘minimal’ NP is a non-recursive NP,
i.e. none of its child constituents are NPs. The term
was ﬁrst used in (Ramshaw and Marcus 95).

Figure 1: An overview of the representation used by the model. (a) The tagged sentence; (b) A candidate
parse-tree (the correct one); (c) A dependency representation of (b). Square brackets enclose baseNPs
(heads of baseNPs are marked in bold). Arrows show modiﬁer → head dependencies. Section 2.1 describes
how arrows are labeled with non-terminal triples from the parse-tree. Non-head words within baseNPs are
excluded from the dependency structure; (d) B, the set of baseNPs, and D, the set of dependencies, are
extracted from (c).

Sections 2.1 to 2.4 describe the dependency model.
Section 2.5 then describes the baseNP model, which
uses bigram tagging techniques similar to (Ramshaw
and Marcus 95; Church 88).

The Mapping from Trees to Sets of Dependencies

The dependency model is limited to relationships
between words in reduced sentences such as Example 1. The mapping from trees to dependency
structures is central to the dependency model. It is
deﬁned in two steps:

1. For each constituent P →< C1...Cn > in the
parse tree a simple set of rules3 identiﬁes which
of the children Ci
is the ‘head-child’ of P . For
example, NN would be identiﬁed as the head-child
of NP <DET JJ JJ NN>, VP would be identiﬁed
as the head-child of S <NP VP>. Head-words
propagate up through the tree, each parent receiv-
ing its head-word from its head-child. For example,
in S <NP VP>, S gets its head-word, announced,

3The rules are essentially the same as in (Magerman
95; Jelinek et al. 94). These rules are also used to ﬁnd
the head-word of baseNPs, enabling the mapping from
S and B to S.

Figure 2: Parse tree for the reduced sentence in
Example 1. The head-child of each constituent is
shown in bold. The head-word for each constituent
is shown in parentheses.

2. Head-modiﬁer relationships are now extracted
from the tree in Figure 2. Figure 3 illustrates how
each constituent contributes a set of dependency re-
lationships. VBD is identiﬁed as the head-child of
VP → <VBD NP NP>. The head-words of the two
NPs, resignation and yesterday, both modify the
head-word of the VBD, announced. Dependencies are
labeled by the modiﬁer non-terminal, NP in both of
these cases, the parent non-terminal, VP, and ﬁnally
the head-child non-terminal, VBD. The triple of non-
terminals at the start, middle and end of the arrow
specify the nature of the dependency relationship –
<NP,S,VP> represents a subject-verb dependency,
<PP,NP,NP> denotes prepositional phrase modiﬁ-
cation of an NP, and so on4.

Figure 3: Each constituent with n children (in this
case n = 3) contributes n − 1 dependencies.

Each word in the reduced sentence, with the ex-
ception of the sentential head ‘announced’, modiﬁes
exactly one other word. We use the notation

to state that the jth word in the reduced sentence
is a modiﬁer to the hjth word, with relationship
5. AF stands for ‘arrow from’. Rj is the triple
Rj
of labels at the start, middle and end of the ar-
row. For example, ¯w1 = Smith in this sentence,

The triple can also be viewed as representing a se-
mantic predicate-argument relationship, with the three
elements being the type of the argument, result and func-
tor respectively. This is particularly apparent in Cat-
egorial Grammar formalisms (Wood 93), which make
an explicit link between dependencies and functional
application.

2.2 Calculating Dependency Probabilities
This section describes the way P (AF (j)|S, B) is es-
timated. The same sentence is very unlikely to ap-
pear both in training and test data, so we need to
back-oﬀ from the entire sentence context. We believe
that lexical information is crucial to attachment de-
cisions, so it is natural to condition on the words and
tags. Let V be the vocabulary of all words seen in
training data, T be the set of all part-of-speech tags,
and T RAIN be the training set, a set of reduced
sentences. We deﬁne the following functions:

An estimate based on the identities of the two tokens
alone is problematic. Additional context, in partic-
ular the relative order of the two words and the dis-
tance between them, will also strongly inﬂuence the
likelihood of one word modifying the other. For ex-
ample consider the relationship between ‘sales’ and
the three tokens of ‘of’:
Example 2 Shaw, based in Dalton, Ga., has an-
nual sales of about $ 1.18 billion, and has economies
of scale and lower raw-material costs that are ex-
pected to boost the proﬁtability of Armstrong ’s
brands, sold under the Armstrong and Evans-Black
names .

In this sentence ‘sales’ and ‘of’ co-occur three
times. The parse tree in training data indicates a
relationship in only one of these cases, so this sen-
tence would contribute an estimate of 1
3 that the
two words are related. This seems unreasonably low
given that ‘sales of’ is a strong collocation. The lat-
ter two instances of ‘of’ are so distant from ‘sales’
that it is unlikely that there will be a dependency.

This suggests that distance is a crucial variable
when deciding whether two words are related. It is
included in the model by deﬁning an extra ‘distance’
variable, ∆, and extending C, F and ˆF to include
this variable. For example, C( ha, bi , hc, di , ∆) is
the number of times ha, bi and hc, di appear in the
same sentence at a distance ∆ apart. (11) is then
maximised instead of (10):

A simple example of ∆j,hj would be ∆j,hj = hj − j.
However, other features of a sentence, such as punc-
tuation, are also useful when deciding if two words

are related. We have developed a heuristic ‘dis-
tance’ measure which takes several such features into
account The current distance measure ∆j,hj is the
combination of 6 features, or questions (we motivate
the choice of these questions qualitatively – section 4
gives quantitative results showing their merit):

Question 1 Does the hjth word precede or follow
the jth word? English is a language with strong
word order, so the order of the two words in surface
text will clearly aﬀect their dependency statistics.

Question 2 Are the hjth word and the jth word
adjacent? English is largely right-branching and
head-initial, which leads to a large proportion of de-
pendencies being between adjacent words 7. Table 1
shows just how local most dependencies are.

Table 1: Percentage of dependencies vs. distance be-
tween the head words involved. These ﬁgures count
baseNPs as a single word, and are taken from WSJ
training data.

Table 2: Percentage of dependencies vs. number of
verbs between the head words involved.

Question 3 Is there a verb between the hjth word
and the jth word? Conditioning on the exact dis-
tance between two words by making ∆j,hj = hj − j
leads to severe sparse data problems. But Table 1
shows the need to make ﬁner distance distinctions
than just whether two words are adjacent. Consider
the prepositions ‘to’, ‘in’ and ‘of’ in the following
sentence:

Example 3 Oil stocks escaped the brunt of Fri-
day ’s selling and several were able to post gains ,
including Chevron , which rose 5/8 to 66 3/8 in
Big Board composite trading of 2.4 million shares .

The prepositions’ main candidates for attachment
would appear to be the previous verb, ‘rose’, and
the baseNP heads between each preposition and this
verb. They are less likely to modify a more distant
verb such as ‘escaped’. Question 3 allows the parser
to prefer modiﬁcation of the most recent verb – eﬀec-
tively another, weaker preference for right-branching
structures. Table 2 shows that 94% of dependencies
do not cross a verb, giving empirical evidence that
question 3 is useful.

7For example in ‘(John (likes (to (go (to (University
(of Pennsylvania)))))))’ all dependencies are between ad-
jacent words.

• Are there 0, 1, 2, or more than 2 ‘commas’ be-
tween the hjth word and the jth word? (All
symbols tagged as a ‘,’ or ‘:’ are considered to
be ‘commas’).

• Is there a ‘comma’ immediately following the

ﬁrst of the hjth word and the jth word?

• Is there a ‘comma’ immediately preceding the

second of the hjth word and the jth word?

People ﬁnd that punctuation is extremely useful
for identifying phrase structure, and the parser de-
scribed here also relies on it heavily. Commas are
not considered to be words or modiﬁers in the de-
pendency model – but they do give strong indica-
tions about the parse structure. Questions 4, 5 and
6 allow the parser to use this information.

The maximum likelihood estimator
is
likely to be plagued by sparse data problems –
C( h ¯wj , ¯tji , h ¯whj , ¯thj i , ∆j,hj ) may be too low to give
a reliable estimate, or worse still it may be zero leav-
ing the estimate undeﬁned. (Collins 95) describes
how a backed-oﬀ estimation strategy is used for mak-
ing prepositional phrase attachment decisions. The
idea is to back-oﬀ to estimates based on less context.
In this case, less context means looking at the POS
tags rather than the speciﬁc words.

There are four estimates, E1, E2, E3 and E4,
based respectively on: 1) both words and both tags;
2) ¯wj and the two POS tags; 3) ¯whj and the two
POS tags; 4) the two POS tags alone.

where V is the set of all words seen in training data: the
other deﬁnitions of C follow similarly.

Estimates 2 and 3 compete – for a given pair of
words in test data both estimates may exist and
they are equally ‘speciﬁc’ to the test case example.
(Collins 95) suggests the following way of combining
them, which favours the estimate appearing more
often in training data:

This gives three estimates: E1, E23 and E4, a
similar situation to trigram language modeling for
speech recognition (Jelinek 90), where there are tri-
gram, bigram and unigram estimates. (Jelinek 90)
describes a deleted interpolation method which com-
bines these estimates to give a ‘smooth’ estimate,
and the model uses a variation of this idea:

These λ values have the desired property of increas-
ing as the denominator of the more ‘speciﬁc’ esti-
mator increases. We think that a proper implemen-
tation of deleted interpolation is likely to improve
results, although basing estimates on co-occurrence
counts alone has the advantage of reduced training
times.

The overall model would be simpler if we could do
without the baseNP model and frame everything in
terms of dependencies. However the baseNP model
is needed for two reasons. First, while adjacency be-
tween words is a good indicator of whether there
is some relationship between them, this indicator
is made substantially stronger if baseNPs are re-
duced to a single word.
it means that
words internal to baseNPs are not included in the
co-occurrence counts in training data. Otherwise,

Second, in a phrase like ‘The Securities and Exchange Com-
mission closed yesterday’, pre-modifying nouns like
‘Securities’ and ‘Exchange’ would be included in co-
occurrence counts, when in practice there is no way
that they can modify words outside their baseNP.

The baseNP model can be viewed as tagging
the gaps between words with S(tart), C(ontinue),
E(nd), B(etween) or N (ull) symbols, respectively
meaning that the gap is at the start of a BaseN P ,
continues a BaseN P , is at the end of a BaseN P , is
between two adjacent baseN P s, or is between two
words which are both not in BaseN. We call the
gap before the ith word Gi. Probability
estimates are based on counts of consecutive pairs of
words in unreduced training data sentences, where
baseNP boundaries deﬁne whether gaps fall into the
S, C, E, B or N categories. The probability of
a baseNP sequence in an unreduced sentence S is
then:

The estimation method is analogous to that de-
scribed in the sparse data section of this paper. The
method is similar to that described in (Ramshaw and
Marcus 95; Church 88), where baseNP detection is
also framed as a tagging problem.

The denominator in Equation (9) is not actu-
ally constant for diﬀerent baseNP sequences, but we
make this approximation for the sake of eﬃciency
and simplicity. In practice this is a good approxima-
tion because most baseNP boundaries are very well
deﬁned, so parses which have high enough P (B|S)
to be among the highest scoring parses for a sen-
tence tend to have identical or very similar baseNPs.
Parses are ranked by the following quantity9:

The parser ﬁnds the tree which max-
imises (20) subject to the hard constraint that de-
pendencies cannot cross.

In fact we also model the set of unary productions,
U , in the tree, which are of the form P →< C1 >. This
introduces an additional term, ˆP (U |B, S), into (20).

This section describes two modiﬁcations which im-
prove the model’s performance.

• In addition to conditioning on whether depen-
dencies cross commas, a single constraint concerning
punctuation is introduced. If for any constituent Z
in the chart Z → <.. X Y ..> two of its children
X and Y are separated by a comma, then the last
word in Y must be directly followed by a comma, or
must be the last word in the sentence. In training
data 96% of commas follow this rule. The rule also
has the beneﬁt of improving eﬃciency by reducing
the number of constituents in the chart.

• The model we have described thus far takes the
single best sequence of tags from the tagger, and
it is clear that there is potential for better integra-
tion of the tagger and parser. We have tried two
modiﬁcations. First, the current estimation meth-
ods treat occurrences of the same word with diﬀer-
ent POS tags as eﬀectively distinct types. Tags can
be ignored when lexical information is available by
deﬁning

where T is the set of all tags. Hence C (a, c) is the
number of times that the words a and c occur in
the same sentence, ignoring their tags. The other
deﬁnitions in (13) are similarly redeﬁned, with POS
tags only being used when backing oﬀ from lexical
information. This makes the parser less sensitive to
tagging errors.

Second, for each word wi the tagger can provide
the distribution of tag probabilities P (ti|S) (given
the previous two words are tagged as in the best
overall sequence of tags) rather than just the ﬁrst
best tag. The score for a parse in equation (20) then
has an additional term, Qn
i=1 P (ti|S), the product of
probabilities of the tags which it contains.

Ideally we would like to integrate POS tagging
into the parsing model rather than treating it as a
separate stage. This is an area for future research.

The parsing algorithm is a simple bottom-up chart
parser. There is no grammar as such, although
in practice any dependency with a triple of non-
terminals which has not been seen in training
data will get zero probability. Thus the parser
searches through the space of all trees with non-
terminal triples seen in training data. Probabilities
of baseNPs in the chart are calculated using (19),
while probabilities for other constituents are derived
from the dependencies and baseNPs that they con-
tain. A dynamic programming algorithm is used:
if two proposed constituents span the same set of
words, have the same label, head, and distance from

Table 3: Results on Section 23 of the WSJ Treebank. (1) is the basic model; (2) is the basic model
with the punctuation rule described in section 2.7; (3) is model (2) with POS tags ignored when lexical
information is present; (4) is model (3) with probability distributions from the POS tagger. LR/LP =
labeled recall/precision. CBs is the average number of crossing brackets per sentence. 0 CBs, ≤ 2 CBs
are the percentage of sentences with 0 or ≤ 2 crossing brackets respectively.

Figure 4: Diagram showing how two constituents
join to form a new constituent. Each operation gives
two new probability terms: one for the baseNP gap
tag between the two constituents, and the other for
the dependency between the head words of the two
constituents.

the head to the left and right end of the constituent,
then the lower probability constituent can be safely
discarded. Figure 4 shows how constituents in the
chart combine in a bottom-up manner.

4 Results

The parser was trained on sections 02 - 21 of the Wall
Street Journal portion of the Penn Treebank (Mar-
cus et al. 93) (approximately 40,000 sentences), and
tested on section 23 (2,416 sentences). For compari-
son SPATTER (Magerman 95; Jelinek et al. 94) was
also tested on section 23. We use the PARSEVAL
measures (Black et al. 91) to compare performance.

For a constituent to be ‘correct’ it must span the
same set of words (ignoring punctuation, i.e. all to-
kens tagged as commas, colons or quotes) and have
the same label10 as a constituent in the treebank
10SPATTER collapses ADVP and PRT to the same label,
for comparison we also removed this distinction when

Table 4: The contribution of various components of
the model. The results are for all sentences of ≤ 100
words in section 23 using model (3). For ‘no lexi-
cal information’ all estimates are based on POS tags
alone. For ‘no distance measure’ the distance mea-
sure is Question 1 alone (i.e. whether ¯wj precedes
or follows ¯whj ).

parse. Four conﬁgurations of the parser were tested:
(1) The basic model; (2) The basic model with the
punctuation rule described in section 2.7; (3) Model
(2) with tags ignored when lexical information is
present, as described in 2.7; and (4) Model (3) also
using the full probability distributions for POS tags.
We should emphasise that test data outside of sec-
tion 23 was used for all development of the model,
avoiding the danger of implicit training on section
23. Table 3 shows the results of the tests. Table 4
shows results which indicate how diﬀerent parts of
the system contribute to performance.

All tests were made on a Sun SPARCServer 1000E,
using 100% of a 60Mhz SuperSPARC processor. The
parser uses around 180 megabytes of memory, and
training on 40,000 sentences (essentially extracting
the co-occurrence counts from the corpus) takes un-
der 15 minutes. Loading the hash table of bigram
counts into memory takes approximately 8 minutes.
Two strategies are employed to improve parsing
eﬃciency. First, a constant probability threshold is
used while building the chart – any constituents with
lower probability than this threshold are discarded.
If a parse is found, it must be the highest ranked
parse by the model.

If no parse is found, the threshold is lowered and
parsing is attempted again. The process continues
until a parse is found.

Second, a beam search strategy is used. For each
span of words in the sentence the probability, Ph, of
the highest probability constituent is recorded. All
other constituents spanning the same words must
have probability greater than Ph
β for some constant
beam size β – constituents which fall out of this
beam are discarded. The method risks introduc-
ing search-errors, but in practice eﬃciency can be
greatly improved with virtually no loss of accuracy.
Table 5 shows the trade-oﬀ between speed and ac-
curacy as the beam is narrowed.

Table 5: The trade-oﬀ between speed and accuracy
as the beam-size is varied. Model (3) was used for
this test on all sentences ≤ 100 words in section 23.

We have shown that a simple statistical model
based on dependencies between words can parse
Wall Street Journal news text with high accuracy.
The method is equally applicable to tree or depen-
dency representations of syntactic structures.

There are many possibilities for improvement,
which is encouraging. More sophisticated estimation
techniques such as deleted interpolation should be
tried. Estimates based on relaxing the distance mea-
sure could also be used for smoothing – at present we
only back-oﬀ on words. The distance measure could
be extended to capture more context, such as other
words or tags in the sentence. Finally, the model
makes no account of valency.

I would like to thank Mitch Marcus, Jason Eisner,
Dan Melamed and Adwait Ratnaparkhi for many
useful discussions, and for comments on earlier ver-
sions of this paper. I would also like to thank David
Magerman for his help with testing SPATTER.

