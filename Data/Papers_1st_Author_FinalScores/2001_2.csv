sentence,yngve_score,frazier_score,dependency_distance_score
We describe the application of kernel methods to Natural Language Processing (NLP) problems.,3,0.59375,2
"In many NLP tasks the objects being modeled are strings, trees, graphs or other discrete structures which require some mechanism to convert them into feature vectors.",3,0.9137931034482759,2
"We describe kernels for various natural language structures, allowing rich, high dimensional representations of these structures.",3,0.7368421052631579,3
"We show how a kernel over trees can be applied to parsing using the voted perceptron algorithm, and we give experimental results on the ATIS corpus of parse trees.",3,0.8870967741935484,3
"Kernel methods have been widely used to extend the applicability of many well-known algorithms, such as the Perceptron [1], Support Vector Machines [6], or Principal Component Analysis [15].",5,0.6052631578947368,3
A key property of these algorithms is that the only operation they require is the evaluation of dot products between pairs of examples.,2,1.1041666666666667,2
This paper describes the application of kernel methods to Natural Language Processing (NLP) problems.,3,0.5588235294117647,2
In many NLP tasks the input domain cannot be neatly formulated as a sub.,2,0.65625,3
"Instead, the objects being modeled are strings, trees or other discrete structures set of which require some mechanism to convert them into feature vectors.",2,0.9814814814814815,2
"We describe kernels for various NLP structures, and show that they allow computationally feasible representations in very high dimensional feature spaces, for example a parse tree representation that tracks all subtrees.",3,0.8676470588235294,3
"We show how a tree kernel can be applied to parsing using the perceptron algorithm, giving experimental results on the ATIS corpus of parses.",2,1.0,3
"The kernels we describe are instances of Convolution Kernels, which were introduced by Haussler [10] and Watkins [16], and which involve a recursive calculation over the parts of a discrete structure.",4,0.9210526315789473,5
"Although we concentrate on NLP tasks in this paper, the kernels should also be useful in computational biology, which shares similar problems and structures.",3,0.9074074074074074,2
Figure 1 shows some typical structures from NLP tasks.,2,0.65,2
"Each structure involves an observed string (a sentence), and some hidden structure (an underlying state sequence or tree).",4,0.5625,4
Figure 1.,1,1,1
Three NLP tasks where a function is learned from a string to some hidden structure.,2,0.8125,2
"In (a), the hidden structure is a parse tree.",3,0.5769230769230769,2
"In (b), the hidden structure is an underlying sequence of states representing named entity boundaries (SP = Start person, CP = Continue person, SC = Start company, N= No entity).",4,0.7875,2
"In (c), the hidden states represent part-of-speech tags (N = noun, V = verb, P = preposition,).",3,0.75,4
the mapping from an input string to its hidden structure.,2,0,2
"We refer to tasks that involve trees as parsing problems, and tasks that involve hidden state sequences as tagging problems.",3,1.1136363636363635,3
In many of these problems ambiguity is the key issue.,2,0.8636363636363636,2
"although only one analysis is plausible, there may be very many possible analyses.",3,0.8,2
"A common way to deal with ambiguity is to use a stochastic grammar, for example a Probabilistic Context Free Grammar (PCFG) for parsing, or a Hidden Markov Model (HMM) for tagging.",4,0.8026315789473685,3
"Probabilities are attached to rules in the grammar  context-free rules in the case of PCFGs, state transition probabilities and state emission probabilities for HMMs.",3,0.7884615384615384,3
"Rule probabilities are typically estimated using maximum likelihood estimation, which gives simple relative frequency estimates.",2,0.9117647058823529,2
Competing analyses for the same sentence are ranked using these probabilities.,2,0.9166666666666666,1
See [3] for an introduction to these methods.,2,0.7727272727272727,2
This paper proposes an alternative to generative models such as PCFGs and HMMs.,2,0.6071428571428571,1
"Instead of identifying parameters with rules of the grammar, we show how kernels can be used to form representations that are sensitive to larger sub-structures of trees or state sequences.",2,1.140625,2
"The parameter estimation methods we describe are discriminative, optimizing a criterion that is directly related to error rate.",2,1.1,2
"While we use the parsing problem as a running example in this paper, kernels over NLP structures could be used in many ways.",3,0.84,2
"for example, in PCA over discrete structures, or in classication and regression problems.",3,0.78125,3
Structured objects such as parse trees are so prevalent in NLP that convolution kernels should have many applications.,2,0.9210526315789473,2
The previous section introduced PCFGs as a parsing method.,2,0.75,1
This approach essentially counts the relative number of occurences of a given rule in the training data and uses these counts to represent its learned knowledge.,3,0.8148148148148148,3
"PCFGs make some fairly strong independence assumptions, disregarding substantial amounts of structural information.",2,0.7666666666666667,3
"In particular, it does not appear reasonable to assume that the rules applied at level in the parse tree are unrelated to those applied at level  .",2,1.0357142857142858,3
As an alternative we attempt to capture considerably more structural information by considering all tree fragments that occur in a parse tree.,2,1.0,2
This allows us to capture higher order dependencies between grammar rules.,2,1.0,2
See gure 2 for an example.,1,0.9285714285714286,1
"As in a PCFG the new representation tracks the counts of single rules, but it is also sensitive to larger sub-trees.",4,0,2
Figure 2. a) An example tree.,1,1,2
b) The sub-trees of the NP covering the apple.,2,0,1
"The tree in (a) contains all of these sub-trees, and many others.",2,0.90625,3
"We dene a sub-tree to be any subgraph which includes more than one node, with the restriction that entire (not partial) rule productions must be included.",2,1.0333333333333334,4
"For example, the fragment [NP [D the ]] is excluded because it contains only part of the production NP  D N.  Note that will be huge (a given tree will have a number of subtrees that is exponential in its size).",3,0.9583333333333334,3
Because of this we would like design algorithms whose computational complexity does not depend on.,2,1.0625,2
Representations of this kind have been studied extensively by Bod [2].,2,1.0357142857142858,2
"However, the work in [2] involves training and decoding algorithms that depend computationally on the number of subtrees involved.The parameter estimation techniques described in [2] do not correspond to maximum-likelihood estimation or a discriminative criterion.",2,0.8902439024390244,2
see [11] for discussion.,2,1.0714285714285714,2
"The methods we propose show that the score for a parse can be calculated in polynomial time in spite of an exponentially large number of subtrees, and that efcient parameter estimation techniques exist which optimize discriminative criteria that have been well-studied theoretically.",3,1.0568181818181819,4
"Goodman [9] gives an ingenious conversion of the model in [2] to an equivalent PCFG whose number of rules is linear in the size of the training data, thus solving many of the computational issues.",3,0.9390243902439024,4
"An exact implementation of Bods parsing method is still infeasible, but Goodman gives an approximation that can be implemented efciently.",3,0.9772727272727273,2
"However, the method still suffers from the lack of justication of the parameter estimation techniques.",2,0.7941176470588235,2
The key to our efcient use of this high dimensional representation is the denition of an and appropriate kernel.,2,0.775,2
We begin by examining the inner product between two trees  to be  the set of nodes in trees  respectively.,3,1.125,3
We dene the indicator and 0 otherwise.,2,0.9375,2
It follows that .,1,1.125,1
The rst step to efcient computation of the inner product is the following property (which can be proved with some simple algebra).,2,0.84,2
"In training, a parameter is explicitly estimated for each sub-tree.",2,0.7916666666666666,3
"In searching for the best parse, Pre-terminals are nodes directly above words in the surface string, for example the N, V, and D  calculating the score for a parse in principle requires summing over an exponential number of derivations underlying a tree, and in practice is approximated using Monte-Carlo techniques.",4,0.9107142857142857,3
"To see that this recursive denition is correct, note that?",2,1.1666666666666667,2
simply counts the number .,1,0,1
The rst two cases are trivially of common subtrees that are found rooted at both correct.,2,1.1470588235294117,2
"The last, recursive, denition follows because a common subtree for can be formed by taking the production at , together with a choice at each child of simply taking the non-terminal at that child, or any one of the common sub-trees at that child.",3,0.875,3
Thus there are th child.,1,0.9166666666666666,1
"(Note that a similar recursion is described by Goodman [9], Goodmans application being the conversion of Bods model [2] to an equivalent PCFG.)",4,0.7903225806451613,4
This can be a pessimistic estimate of the runtime.,2,0.85,2
A more useful characterization is that it runs in time linear in the number of are the same.,2,1.0789473684210527,2
"In our members data we have found a typically linear number of nodes with identical productions, so that  such that the productions at  can be calculated in  are 0, and the running time is close to linear in the size of the trees.",5,0.8260869565217391,4
"This recursive kernel structure, where a kernel between two objects is dened in terms of kernels between its parts is quite a general idea.",3,0.8846153846153846,2
"Haussler [10] goes into some detail describing which construction operations are valid in this context, i.e.",1,1.0526315789473684,2
which operations maintain the essential Mercer conditions.,2,0.9375,2
This paper and previous work by Lodhi et al.,2,0,2
[12] examining the application of convolution kernels to strings provide some evidence that convolution kernels may provide an extremely useful tool for applying modern machine learning techniques to highly structured objects.,2,0.8823529411764706,3
The key idea here is that one may take a structured object and split it up into parts.,2,0.8947368421052632,2
If one can construct kernels over the parts then one can combine these into a kernel over the whole object.,3,1.0,2
"Clearly, this idea can be extended recursively so that one only needs to construct kernels over the atomic parts of a structured object.",2,0.9,3
The recursive combination of the kernels over parts of an object retains information regarding the structure of that object.,2,0.975,1
Several issues remain with the kernel we describe over trees and convolution kernels in.,2,0.9333333333333333,2
"Second, the value of the kernel when applied to two copies of the same tree can be extremely large (in our experiments on the order of ) while the value of the kernel between two different trees is typically much smaller (in our experiments the typical pairwise comparison is of order 100).",3,0.9649122807017544,4
By analogy with a Gaussian kernel we say that the kernel is very peaked.,2,0.9333333333333333,2
"If one constructs a model which is a linear combination of trees, as one would with an SVM [6] or the perceptron, the output will be dominated by the most similar tree and so the model will behave like a nearest neighbor rule.",6,0.7291666666666666,2
There are several possible solutions to this problem.,2,0.8333333333333334,2
"Following Haussler [10] we may radialize the kernel, however, it is not always clear that the result is still a valid kernel.",4,0.7592592592592593,2
Radializing did not appear to help in our experiments.,1,1.0,1
These problems motivate two simple modications to the tree kernel.,2,0.5909090909090909,2
Since there will be many more tree fragments of larger size  say depth four versus depth three  and symbols in Figure 2.,3,0.9565217391304348,3
This can be achieved by introducing a parameter and modifying the base case and recursive case of the denitions of ?,2,0.8571428571428571,2
This corresponds to a modied kernel of tree fragments exponentially with their size.,2,0.8214285714285714,3
"It is straightforward to design similar kernels for tagging problems (see gure 1) and for another common structure found in NLP, dependency structures.",2,0.9444444444444444,3
See [5] for details.,2,1.0714285714285714,2
"In the tagging kernel, the implicit feature representation tracks all features consisting of a subsequence of state labels, each with or without an underlying word.",3,0.75,3
"For example, the paired sequence would include features such as SP CP is/N N of/N and so on.",2,0.675,3
This section formalizes the use of kernels for parsing and tagging problems.,2,0.8076923076923077,2
The method is derived by the transformation from ranking problems to a margin-based classication problem in [8].,2,0.775,2
"It is also related to the Markov Random Field methods for parsing suggested in [13], and the boosting methods for parsing in [4].",2,0.8275862068965517,4
We consider the following set-up.,1,0.75,3
"is represented by a feature vector  th sentence in training data, and  is the correct tree for that sentence.",3,0,3
Training data is a set of example input/output pairs.,2,0.75,2
We assume some way of enumerating a set of candidates for a particular sentence.,2,1.0666666666666667,2
We B Without loss of generality we take B Each candidate eters of the model are also a vector example as candidate.,3,1.0434782608695652,1
"The output of the model on a training or test example , note that a ranking funcWhen considering approaches to training the parameter vector tion that correctly ranked the correct parse above all competing candidates would satisfy .",3,0.868421052631579,4
It is simple to modify the Perceptron the conditions and Support Vector Machine algorithms to treat this problem.,2,1.0263157894736843,3
"For example, the SVM optimization problem (hard margin version) is to nd the subject to !98 which minimizes the constraints.",3,0.7894736842105263,3
This can be achieved using a modied dynamic programming table where < in [13]) or to take the5 most probable parses from an existing probabilistic parser (as in [4]).,3,0.8378378378378378,3
A A context-free grammar  perhaps taken straight from the training examples  is one way of enumerating candidates.,2,0.75,3
Table 1.,1,1,1
Score shows how the parse score varies with the maximum depth of sub-tree considered by the perceptron.,2,1.0,2
"Improvement is the relative reduction in error in comparison to the PCFG, which scored 74%.",2,1.0555555555555556,2
The numbers reported are the mean and standard deviation over the 10 development sets.,2,0.6333333333333333,2
for dual parameters.,1,0,2
"It follows that the score of a parse can be calculated using the dual parameters, and inner products between feature vectors, without having to explicitly deal with feature or parameter vectors in the space  as shorthand for.",3,0.9375,3
"For example, see gure 3 for the perceptron algorithm applied to this problem.",2,0.7666666666666667,2
To demonstrate the utility of convolution kernels for natural language we applied our tree kernel to the problem of parsing the Penn treebank ATIS corpus [14].,3,0.7413793103448276,2
"We split the treebank randomly into a training set of size 800, a development set of size 200 and a test set of size 336.",3,0.7222222222222222,2
This was done 10 different ways to obtain statistically signicant results.,2,0.9166666666666666,2
"A PCFG was trained on the training set, and a beam search was used to give a set of parses, with PCFG probabilities, for each of the sentences.",3,0.703125,3
"We applied a variant of the voted perceptron algorithm [7], which is a more robust version of the original perceptron algorithm with performance similar to that of SVMs.",3,0.90625,3
The voted perceptron can be kernelized in the same way that SVMs can but it can be considerably more computationally efcient.,3,0.9090909090909091,2
We generated a ranking problem by having the PCFG generate its top 100 candidate parse trees for each sentence.,2,0.725,3
"The voted perceptron was applied, using the tree kernel described previously, to this re-ranking problem.",2,0.9722222222222222,2
It was trained on 20 trees selected randomly from the top 100 for each sentence and had to choose the best candidate from the top 100 on the test set.,3,0.8064516129032258,3
We tested the sensitivity to two parameter settings.,2,0.7222222222222222,2
"rst, the maximum depth of sub-tree examined, and second, the scaling factor used to down-weight deeper trees.",3,0,3
For each value of the parameters we trained on the training set and tested on the development set.,3,0.7631578947368421,2
We report the results averaged over the development sets in Tables 1 and 2.,2,0.9666666666666667,2
We report a parse score which combines precision and recall.,2,1.0,2
Table 2.,1,1,1
Score shows how the parse score varies with the scaling factor for deeper sub-trees is varied.,2,0.9705882352941176,4
Imp.,0,0,0
"is the relative reduction in error in comparison to the PCFG, which scored 74%.",2,1.0588235294117647,2
The numbers reported are the mean and standard deviation over the 10 development sets.,2,0.6333333333333333,2
"The precision and recall on the the average precision recall, weighted by the size of the trees improvements over the PCFG scores.",3,0.6041666666666666,3
We nally used the development set for cross-validation to choose the best parameter settings for each split.,2,0.9444444444444444,3
"We used the best parameter settings (on the development sets) for each split to train on both the training and development sets, then tested on the test set.",4,0.71875,4
This gave with the best choice of maximum depth and a score a relative goodness score of of on the test data.,3,0.717391304347826,3
All of these results were obtained by running the perceptron through the training data only once.,2,0.8823529411764706,2
"As has been noted previously by Freund and Schapire [7], the voted perceptron often obtains better results when run multiple times through the training data.",3,0.9655172413793104,2
"Running through , the data twice with a maximum depth of 3 yielded a relative goodness score of while using a larger number of iterations did not improve the results signicantly.",3,0,2
with the best choice of scaling factor.,2,0,2
In summary we observe that in these simple experiments the voted perceptron and an appropriate convolution kernel can obtain promising results.,2,0.9318181818181818,4
However there are other methods which perform considerably better than a PCFG for NLP parsing  see [3] for an overview  future work will investigate whether the kernels in this paper give performance gains over these methods.,2,1.0128205128205128,3
"When used with algorithms such as the perceptron, convolution kernels may be even more computationally attractive than the traditional radial basis or polynomial kernels.",3,0.7692307692307693,2
The linear combination of parse trees constructed by the perceptron algorithm can be viewed as a weighted forest.,2,0.7631578947368421,2
One may then search for subtrees in this weighted forest that occur more which contain a common than once.,2,1.175,2
"Given a linear combination of two trees subtree, we may construct a smaller weighted acyclic graph, in which the common subtree occurs only once and has weight .",3,0.8833333333333333,3
This process may be repeated until an arbitrary linear combination of trees is collapsed into a weighted acyclic graph in which no subtree occurs more than once.,2,0.9464285714285714,3
The perceptron may now be evaluated on a new tree by a straightforward generalization of the tree kernel to weighted acyclic graphs of the form produced by this procedure.,2,0.8166666666666667,2
"Given the nature of our data  the parse trees have a high branching factor, the words are chosen from a dictionary that is relatively small in comparison to the size of the training data, and are drawn from a very skewed distribution, and the ancestors of leaves are part of speech tags  there are a relatively small number of subtrees in the lower levels of the parse trees that occur frequently and make up the majority of the data.",4,0.8674698795180723,3
It appears that the approach we have described above should save a considerable amount of computation.,2,1.2058823529411764,3
This is something we intend to explore further in future work.,1,1.375,2
In this paper we described how convolution kernels can be used to apply standard kernel based algorithms to problems in natural language.,2,1.108695652173913,2
Tree structures are ubiquitous in natural language problems and we illustrated the approach by constructing a convolution kernel over tree structures.,2,0.6590909090909091,2
The problem of parsing English sentences provides an appealing example domain and our experiments demonstrate the effectiveness of kernel-based approaches to these problems.,3,0.8958333333333334,2
Convolution kernels combined with such techniques as kernel PCA and spectral clustering may provide a computationally attractive approach to many other problems in natural language processing.,3,0.6851851851851852,2
"Unfortunately, we are unable to expand on the many potential applications in this short note, however, many of these issues are spelled out in a longer Technical Report [5].",4,0.8142857142857143,3
